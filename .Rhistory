data.1 <-fromJSON("PU-SA/data/students.json")
install.packages("jsonlite")
data(iris)
install.packages("c5.0")
install.packages("c50")
yes
install.packages("C50")
View(iris)
set.seed(101)
tamano.total
tamano.total <- nrow(datos)
data(iris)
datos<- iris
set.seed(101)
tamano.total <- nrow(datos)
tamano.entreno <- round(tamano.total*0.7)
datos.indices <- sample(1:tamano.total , size=tamano.entreno)
datos.entreno <- datos[datos.indices,]View(datos.entreno)
datos.test <- datos[-datos.indices,]
View(datos)
View(datos.test)
data(iris)
datos<- iris
set.seed(101)
tamano.total <- nrow(datos)
tamano.entreno <- round(tamano.total*0.7)
datos.indices <- sample(1:tamano.total , size=tamano.entreno)
datos.entreno <- datos[datos.indices,]
View(datos.entreno)
View(datos.entreno)
View(datos.test)
# Ejecución del modelo de clasificación C5.0
modelo <- C5.0(Species ~ .,data = datos.entreno)
summary(modelo) # Información sobre el modelo
plot(modelo) # Gráfico
# Ejecución del modelo de clasificación C5.0
modelo <- C5.0(Species ~ .,data = datos.entreno)
plot(modelo) # Gráfico
data(iris)
datos<- iris
View(datos)
#  seet.seed, obtiene datos aleatorios desde un punto especifico (101)
set.seed(101)
tamano.total <- nrow(datos)
tamano.entreno <- round(tamano.total*0.7)
datos.indices <- sample(1:tamano.total , size=tamano.entreno)
datos.entreno <- datos[datos.indices,]
View(datos.entreno)
datos.test <- datos[-datos.indices,]
View(datos.test)
# Ejecución del modelo de clasificación C5.0
modelo <- C5.0(Species ~ .,data = datos.entreno)
summary(modelo) # Información sobre el modelo
# Ejecución del modelo de clasificación C5.0
modelo <- C50(Species ~ .,data = datos.entreno)
summary(modelo) # Información sobre el modelo
plot(modelo) # Gráfico
# Ejecución del modelo de clasificación C5.0
modelo <- C50(Species ~ .,data = datos.entreno)
# Ejecución del modelo de clasificación C5.0
modelo <- C5.0(Species ~ .,data = datos.entreno)
library("C50", lib.loc="~/R/win-library/3.4")
# Ejecución del modelo de clasificación C5.0
modelo <- C5.0(Species ~ .,data = datos.entreno)
summary(modelo) # Información sobre el modelo
plot(modelo) # Gráfico
# Para detallar un nodo en particular se usaria la siguiente función
plot(modelo, subtree=3)  #Muestra un nodo en particular
# predicción
prediccion <- predict(modelo,newdata=datos.test)
View(prediccion)
# Matriz de confusión
tabla <- table(prediccion, datos.test$Species)
tabla
# % correctamente clasificados
100*sum(diag(tabla))/sum(tabla)
# Sepal no interviene, por lo tanto no necesita un valor
nuevo <- data.frame(Sepal.Length=NA,Sepal.Width=NA,Petal.Length=5,Petal.Width=1)
View(nuevo)
prediccion<-predict(modelo,nuevo)
View(prediccion)
prediccion.prob<-predict(modelo,nuevo, type = "prob")
View(prediccion.prob)
datos<- read.delim("clipboard")
View(datos)
plot(modelo)
modelo <- C5.0(playTennis ~ .,data = datos.entreno)
# modelo C5
modelo<-C5.0(PlayTennis~.,data=datos)
summary(modelo)
# grafico del arbol
plot(modelo)
# test
datos.test<-read.delim('clipboard')
# test
datos.test<-read.delim('clipboard', sep = ",")
# test
datos.test<-read.delim('clipboard', sep = "\")
View(datos.test)
View(datos)
View(datos.test)
View(datos.test)
View(datos.test)
View(datos.test)
View(datos.test)
View(datos.test)
View(datos.test)
View(datos.test)
View(datos.test)
datos.test
datos.test
View(datos.test)
View(datos)
View(datos.test)
# grafico del arbol
plot(modelo)
View(datos.test)
data(iris)
datos<- iris
View(datos)
datos.test<-read.delim('clipboard', sep = ",")
View(datos.test)
datos.test<-read.delim('clipboard', sep = ",")
datos.test<-read.delim('clipboard')
prediccion <- predict(modelo,datos.test)
###################################################################################
datos<- read.delim("clipboard")
View(datos)
# modelo C5
modelo<-C5.0(PlayTennis~.,data=datos)
library("C50", lib.loc="~/R/win-library/3.4")
# modelo C5
modelo<-C5.0(PlayTennis~.,data=datos)
summary(modelo)
# grafico del arbol
plot(modelo)
datos.test<-read.delim('clipboard')
View(datos.test)
prediccion <- predict(modelo,datos.test)
View(prediccion)
# Matriz de confusión
tabla <- table(prediccion, datos.test$PlayTennis)
tabla
# % correctamente clasificados
100 * sum(diag(tabla)) / sum(tabla)
library("arulesViz", lib.loc="~/R/win-library/3.4")
library("arules", lib.loc="~/R/win-library/3.4")
library(arules)
library(arulesViz)
install.packages("arulesViz")
library(arulesViz)
library("arulesViz", lib.loc="~/R/win-library/3.4")
library(arulesViz)
library(arules)
library(arulesViz)
install.packages("arules")
library(arules)
install.packages("Matrix")
install.packages("Matrix")
install.packages("Matrix")
library(arules)
library(Matrix)
library(arules)
library(arulesViz)
install.packages("grid")
library("arules", lib.loc="~/R/win-library/3.4")
library("arulesViz", lib.loc="~/R/win-library/3.4")
library(arulesViz)
install.packages("arulesViz")
library("arulesViz", lib.loc="~/R/win-library/3.4")
library("arules", lib.loc="~/R/win-library/3.4")
market1=split(market$Item,market$Id_factura )
market=read.table(file.choose(),header = T, sep=",")
market
colnames(market)
head(market)
trx=unique(market$Id_Factura)
trx
length(trx)
prod=unique(market$Item)
prod
length(prod)
trx_prod=table(market$Id_Factura,market$Item)
trx_prod
dim(trx_prod)
colnames(trx_prod)
sort(table(market$Item))
#para ver el soporte
sort(table(market$Item))/9835
market1=split(market$Item,market$Id_factura )
market1=split(market$Item,market$Id_Factura)
market1
market2=as(market1,"transactions")
market2
####
#elementos de mayor soporte
itemFrequencyPlot(market2,topn=10)
####
#elementos de mayor soporte
itemFrequencyPlot(market2,topnv=10)
####
#elementos de mayor soporte
itemFrequencyPlot(market2,topN=10)
####
#elementos de mayor soporte
itemFrequencyPlot(market2,topN=10)
reglas=apriori(market2,parameter = list(support=0.01,confidence=0.01))
inspect(reglas)
reglas=apriori(market2,parameter = list(support=0.01,confidence=0.01))
inspect(reglas)
inspect(reglas)
reglas=apriori(market2,parameter = list(support=0.1,confidence=0.30))
inspect(reglas)
reglas=apriori(market2,parameter = list(support=0.1,confidence=0.30))
inspect(reglas)
reglas=apriori(market2,parameter = list(support=0.5,confidence=0.30))
inspect(reglas)
reglas=apriori(market2,parameter = list(support=0.5,confidence=0.30))
inspect(reglas)
reglas=apriori(market2,parameter = list(support=0.05,confidence=0.30))
inspect(reglas)
reglas=apriori(market2,parameter = list(support=0.05,confidence=0.25))
inspect(reglas)
reglas=apriori(market2,parameter = list(support=0.04,confidence=0.25))
inspect(reglas)
reglas=apriori(market2,parameter = list(support=0.04,confidence=0.15))
inspect(reglas)
reglas=apriori(market2,parameter = list(support=0.025,confidence=0.15))
inspect(reglas)
reglas=apriori(market2,parameter = list(support=0.02,confidence=0.10))
inspect(reglas)
reglas1=sort(reglas,by="confidence", dreceasing=T)
reglas1
inspect(reglas1)
reglas1=sort(reglas,by="confidence", dreceasing=T)
reglas1
inspect(reglas1)
plot(head(reglas1,10)methods="grouped")
plot(head(reglas1,10), methods="grouped")
plot(head(reglas1,100),method = "grouped")
plot(head(reglas1,10), method="grouped")
detach("package:arulesViz", unload=TRUE)
library("arulesViz", lib.loc="~/R/win-library/3.4")
plot(head(reglas1,100),method = "grouped")
install.packages("arulesViz")
library(arulesViz)
plot(head(reglas1,100),method = "grouped")
plot(head(reglas1,100),method = "grouped")
regla_df=as.data.frame(inspect(reglas))
reglas_df=as.data.frame(inspect(reglas))
support_lhs=reglas_df$support/reglas_df$confidence
reglas_df1=cbind(reglas_df,support_lhs)
reglas_df1
support_lhs=reglas_df$support/reglas_df$confidence
reglas_df1=cbind(reglas_df,support_lhs)
reglas_df1
churn= read.table(file.choose(),header = t,sep = ";")
head(churn)
head(churn)
churn= read.table(file.choose(),header = t,sep = ";")
churn= read.table(file.choose(),header = T,sep = ";")
head(churn)
chisq.test(churn$CHURNED,churn$PAY_MTHD)
chisq.test(churn$CHURNED,churn$LocalBillType)
chisq.test(churn$CHURNED,churn$LongDistanceBillType)
chisq.test(churn$CHURNED,churn$SEX)
chisq.test(churn$CHURNED,churn$STATUS)
chisq.test(churn$CHURNED,churn$Car_Owner)
t.test(churn$LONGDIST~churn$CHURNED)
churn
t.test(churn$International~churn$CHURNED)
t.test(churn$LOCAL~churn$CHURNED)
t.test(churn$DROPPED~churn$CHURNED)
t.test(churn$DROPPED~churn$CHURNED)
t.test(churn$DROPPED~churn$CHURNED)
t.test(churn$AGE~churn$CHURNED)
t.test(churn$CHILDREN~churn$CHURNED)
t.test(churn$Est_Income~churn$CHURNED)
summary(model_logi)
# 4 variables tiene realcion
#modelo de regresion logistica
model_logi=glm(CHURNED~SEX+International+AGE+Est_Income, data=churn,family = "binomial")
summary(model_logi)
prob_logi=predict(model_logi,data=churn,type="link")
prob_logi
prob_logi=predict(model_logi,data=churn,type="resp")
prob_logi
hist(prob_logi)
boxplot(prob_logi~churn$CHURNED)
install.packages("pROC")
roc_logit=roc(churn$CHURNED,prob_logi)
auc(roc_logit)
library("pROC", lib.loc="~/R/win-library/3.4")
roc_logit=roc(churn$CHURNED,prob_logi)
library(pROC)
install.packages("pROC")
library(pROC)
library("pROC", lib.loc="~/R/win-library/3.4")
library(pROC)
roc_logit=roc(churn$CHURNED,prob_logi)
auc(roc_logit)
library(rpart)
colnames(roc_logit)
churn1=churn[,1 ]
colnames(churn1)
model_arbol=rpart(CHURNED~.,data=churn1)
model_arbol
k=  1513/513
k
k=  1345/513
k
k=  513/1345
k
i90/672
i=90/672
i
install.packages("rpart.plot")
library(rpart.plot)
rpart.plot(model_arbol)
prob_Arbol=predict(model_arbol,data=churn1,type="prob")
boxplot(prob_Arbol_vol~churn$CHURNED)
roc_arbol=roc(churn$CHURNED,prob_Arbol_vol)
